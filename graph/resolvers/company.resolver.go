package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"cds-graphql-poc/graph"
	l "cds-graphql-poc/graph/loaders"
	"cds-graphql-poc/graph/model"
	"context"
	"fmt"
)

// FundingRounds is the resolver for the fundingRounds field.
func (r *companyResolver) FundingRounds(ctx context.Context, obj *model.Company) ([]*model.FundingRound, error) {
	panic(fmt.Errorf("not implemented: FundingRounds - fundingRounds"))
}

// Investments is the resolver for the investments field.
func (r *companyResolver) Investments(ctx context.Context, obj *model.Company) ([]*model.Investment, error) {
	investments, err := l.GetInvestmentsForCompany(ctx, int(obj.OrgID))
	if err != nil {
		return nil, err
	}

	for _, investment := range investments {
		investment.Investor = obj
	}

	return investments, nil
}

// MarketCap is the resolver for the marketCap field.
func (r *companyResolver) MarketCap(ctx context.Context, obj *model.Company) (float64, error) {
	kpiSummary, err := l.GetSummaryKPI(ctx, int(obj.OrgID))
	if err != nil {
		return 0, err
	}

	return kpiSummary.MarketCap, nil
}

// TotalRaised is the resolver for the totalRaised field.
func (r *companyResolver) TotalRaised(ctx context.Context, obj *model.Company) (float64, error) {
	kpiSummary, err := l.GetSummaryKPI(ctx, int(obj.OrgID))
	if err != nil {
		return 0, err
	}

	return kpiSummary.TotalFunding, nil
}

// Ceo is the resolver for the ceo field.
func (r *companyResolver) Ceo(ctx context.Context, obj *model.Company) (*model.KeyPerson, error) {
	kpiSummary, err := l.GetSummaryKPI(ctx, int(obj.OrgID))
	if err != nil {
		return nil, err
	}

	return &model.KeyPerson{
		ID:      fmt.Sprintf("%d", kpiSummary.Ceo.Id),
		Name:    kpiSummary.Ceo.FullName,
		Title:   kpiSummary.Ceo.Title,
		Company: obj,
	}, nil
}

// Company returns graph.CompanyResolver implementation.
func (r *Resolver) Company() graph.CompanyResolver { return &companyResolver{r} }

type companyResolver struct{ *Resolver }

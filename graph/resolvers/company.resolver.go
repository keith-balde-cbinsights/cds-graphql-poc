package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"cds-graphql-poc/graph"
	"cds-graphql-poc/graph/model"
	"context"
	"fmt"
)

// FundingRounds is the resolver for the fundingRounds field.
func (r *companyResolver) FundingRounds(ctx context.Context, obj *model.Company) ([]*model.FundingRound, error) {
	panic(fmt.Errorf("not implemented: FundingRounds - fundingRounds"))
}

// Investments is the resolver for the investments field.
func (r *companyResolver) Investments(ctx context.Context, obj *model.Company) ([]*model.Investment, error) {
	panic(fmt.Errorf("not implemented: Investments - investments"))
}

// MarketCap is the resolver for the marketCap field.
func (r *companyResolver) MarketCap(ctx context.Context, obj *model.Company) (*model.NumericValue, error) {
	panic(fmt.Errorf("not implemented: MarketCap - marketCap"))
}

// TotalRaised is the resolver for the totalRaised field.
func (r *companyResolver) TotalRaised(ctx context.Context, obj *model.Company) (*model.NumericValue, error) {
	panic(fmt.Errorf("not implemented: TotalRaised - totalRaised"))
}

// Ceo is the resolver for the ceo field.
func (r *companyResolver) Ceo(ctx context.Context, obj *model.Company) (*model.KeyPerson, error) {
	panic(fmt.Errorf("not implemented: Ceo - ceo"))
}

// Company returns graph.CompanyResolver implementation.
func (r *Resolver) Company() graph.CompanyResolver { return &companyResolver{r} }

type companyResolver struct{ *Resolver }
